// SPDX-FileCopyrightText: 2023 Mischback
// SPDX-License-Identifier: MIT
// SPDX-FileType: SOURCE

/**
 * Provide the basic formatting for all buttons.
 *
 * This mixin provides the basic formatting, especially for handling of ``:focus`` of the button.
 *
 * The actual visual appearance must be provided by the actual button classes.
 *
 * The following HTML structure is assumed:
 *
 *  <button>
 *    <span class="focus">
 *      <!-- This would be the place for a button-specific icon -->
 *      <span class="text-wrapper">Button Text</span>
 *    </span>
 *  </button>
 */
@mixin button-base(
  $focus-color,
  $focus-width: $focus-outline-width,
  $button-border-radius: $border-radius-fraction
) {
  padding: calc(0.25em + $focus-width) calc(0.5em + $focus-width);
  border: 0 solid transparent;
  border-radius: $button-border-radius;
  outline: none;
  background: transparent;
  font-weight: bold;
  cursor: pointer;

  .focus {
    display: inline-flex;
    align-items: center;
    margin: 0;
    padding: $focus-width;
    border-radius: $button-border-radius;
    outline: transparent solid $focus-width;
    outline-offset: 0;

    /* transition: outline-color 150ms cubic-bezier(0.37, 0, 0.63, 1); */
  }

  &:focus .focus {
    outline-color: $focus-color;
  }

  .text-wrapper {
    margin: 0;
    padding: 0;
    border-bottom: 1px solid transparent;
  }
}

/**
 * The default button appearance, placed on a light background.
 *
 * The following HTML structure is assumed:
 *
 *  <button class="content-button" type="button">
 *    <span class="focus">
 *      <!-- This would be the place for a button-specific icon -->
 *      <span class="text-wrapper">Toggle Me!</span>
 *    </span>
 *  </button>
 */
.content-button {
  @include button-base(var(--this-focus, var(--if-button-focus)));
  @include content-box-shadow;
  @include bg-gradient(
    var(--this-bg-darkest, var(--if-button-bg-darkest)),
    var(--this-bg-dark, var(--if-button-bg-dark)),
    var(--this-bg-light, var(--if-button-bg-light)),
    var(--this-bg-lightest, var(--if-button-bg-lightest))
  );

  color: var(--this-fg, var(--if-button-fg));

  &:hover {
    --this-bg-darkest: var(--if-button-hover-bg-darkest);
    --this-bg-dark: var(--if-button-hover-bg-dark);
    --this-bg-light: var(--if-button-hover-bg-light);
    --this-bg-lightest: var(--if-button-hover-bg-lightest);
    --this-focus: var(--if-button-hover-focus);
    --this-fg: var(--if-button-hover-fg);
  }
}

/**
 * A *dangerous* button, intended for removal operations.
 *
 * Note the high specificity selector!
 */
.danger.danger {
  --this-bg-darkest: var(--if-danger-button-bg-darkest);
  --this-bg-dark: var(--if-danger-button-bg-dark);
  --this-bg-light: var(--if-danger-button-bg-light);
  --this-bg-lightest: var(--if-danger-button-bg-lightest);
  --this-focus: var(--if-danger-button-focus);
  --this-fg: var(--if-danger-button-fg);

  &:hover {
    --this-bg-darkest: var(--if-button-hover-bg-darkest);
    --this-bg-dark: var(--if-button-hover-bg-dark);
    --this-bg-light: var(--if-button-hover-bg-light);
    --this-bg-lightest: var(--if-button-hover-bg-lightest);
    --this-focus: var(--if-button-hover-focus);
    --this-fg: var(--if-button-hover-fg);
  }
}

/**
 * Create a button to *toggle* a setting.
 *
 * The following HTML structure is assumed / provided as template in ``src/index.html``:
 *
 *  <button aria-pressed="true" class="toggle-button" type="button">
 *    <span class="focus">
 *      <span class="toggle-base"><span class="toggle-thumb"></span></span>
 *      <span class="text-wrapper">Toggle Me!</span>
 *    </span>
 *  </button>
 */
.toggle-button {
  // FIXME: Styling of toggle buttons
  @include button-base($color-unstyled);

  // FIXME: Styling of toggle buttons
  color: $color-unstyled;

  .toggle-base {
    @include content-box-shadow;
    @include bg-gradient-auto($color-light-grey);

    display: inline-block;
    position: relative;
    width: 2em;
    height: 1em;
    margin: 0 0.5em 0 0.1em;
    padding: 0;
    border-radius: 0.5em;

    // Note: Transition timings have to be synchronized with ``toggle-thumb``!

    /* transition: background 100ms cubic-bezier(0.37, 0, 0.63, 1) 150ms; */

    > .toggle-thumb {
      @include content-box-shadow;

      display: inline-block;
      position: absolute;
      top: -0.05em;
      left: calc(50% - 0.55em);
      width: 1.1em;
      height: 1.1em;
      border-radius: 5em;

      // The colors in this gradient are not derived from
      // ``abstracts/colors.scss`` because they are independent from the actual
      // colorscheme
      background: radial-gradient(
        circle farthest-corner at right bottom,
        #333 0%,
        #fff 100%
      );

      // Note: Transition timings have to be synchronized with ``toggle-base``!

      /* transition: left 200ms cubic-bezier(0.2, 0.1, 0.6, 2.0); */
    }
  }

  // FIXME: Styling of toggle buttons
  &:hover .text-wrapper {
    border-bottom-color: $color-unstyled;
  }

  &[aria-pressed="false"] .toggle-base {
    @include bg-gradient-auto($color-off);

    > .toggle-thumb {
      left: -0.1em;
    }
  }

  &[aria-pressed="true"] .toggle-base {
    @include bg-gradient-auto($color-on);

    > .toggle-thumb {
      // Note: Actually this is ``100% - [width of thumb] + [offset]``
      left: calc(100% - 1em);
    }
  }
}

.disclosure-button {
  // FIXME: Styling of disclosure buttons
  @include button-base($color-unstyled);

  // FIXME: Styling of disclosure buttons
  color: $color-unstyled;

  svg {
    width: 1.25em;
    height: 1.25em;
    margin: 0 0 0 0.5em;

    use {
      /* purgecss ignore current */
      --icon-stroke-color: #000;
      --icon-stroke-width: 2.5em;
    }
  }

  &[aria-pressed="true"] svg {
    transform: rotate(90deg);

    use {
      /* purgecss ignore current */
      --icon-fill-color: #{$color-on};
    }
  }

  &[aria-pressed="false"] svg use {
    /* purgecss ignore current */
    --icon-fill-color: #{$color-off};
  }

  &:hover .text-wrapper {
    // FIXME: Styling of disclosure buttons
    border-bottom-color: $color-unstyled;
  }
}
